plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = minecraft_version + "-" + mod_version

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            property 'forge.logging.markers', 'SCAN' /* REGISTRIES / REGISTRYDUMP */
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            // Support for mixins of other mods
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        clientRandom {
            parent runs.client
            // #### will be replaced with a random number | UUID is a randomly generated one
            args '--username', 'Dev####', '--uuid', 'fdb0e318-1ac3-4049-b6f8-d024c0b87a56'
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            // Support for mixins of other mods
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir { dirs 'dev' }
    maven { url = "https://jitpack.io" } // Mixin Squared
    maven { url = "https://www.cursemaven.com" } // CurseForge
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"

    implementation fg.deobf("curse.maven:obscure-tooltips-715660:4686579") // 2.2

    implementation fg.deobf("curse.maven:emi-580555:5497473") // 1.1.10

    implementation fg.deobf("curse.maven:jei-238222:5736368") // 15.19.3.93

    implementation fg.deobf("curse.maven:ftb-quests-forge-289412:5543955") // 2001.4.8
    implementation fg.deobf("curse.maven:architectury-api-419699:5137938") // 9.2.14
    implementation fg.deobf("curse.maven:ftb-library-forge-404465:5567591") // 2001.2.4
    implementation fg.deobf("curse.maven:ftb-teams-forge-404468:5267190") // 2001.3.0

    compileOnly fg.deobf("curse.maven:roughly-enough-items-310111:5731526") // 12.1.770
    compileOnly fg.deobf("curse.maven:cloth-config-348521:5729105") // 11.1.136
    compileOnly fg.deobf("curse.maven:architectury-api-419699:5137938") // 9.2.14

    compileOnly fg.deobf("curse.maven:apotheosis-313970:5642736") // 7.4.2
    compileOnly fg.deobf("curse.maven:apothic-attributes-898963:5634071") // 1.3.7
    compileOnly fg.deobf("curse.maven:placebo-283644:5414631") // 8.6.2

    /* --- Mixin Configuration --- */
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

mixin {
    config "${mod_id}.mixins.json"
    add sourceSets.main, "${mod_id}.refmap.json"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors             : mod_authors,
            mod_description        : mod_description
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}